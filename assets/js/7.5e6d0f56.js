(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{419:function(t,e,a){t.exports=a.p+"assets/img/memory-error-notification.88c0943e.png"},420:function(t,e,a){t.exports=a.p+"assets/img/memory-error-aboutthismac.ecac0f88.png"},421:function(t,e,a){t.exports=a.p+"assets/img/CustomMemory-open.4edb1e60.png"},422:function(t,e,a){t.exports=a.p+"assets/img/system-profiler.1f390279.png"},423:function(t,e,a){t.exports=a.p+"assets/img/memory-example.eb665fb8.png"},424:function(t,e,a){t.exports=a.p+"assets/img/memory-example-done.ee737213.png"},425:function(t,e,a){t.exports=a.p+"assets/img/memory-fixed-system-profiler.3dca4074.png"},426:function(t,e,a){t.exports=a.p+"assets/img/memory-fixed-aboutthismac.e447bb59.png"},543:function(t,e,a){"use strict";a.r(e);var r=a(27),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"fixing-macpro7-1-memory-errors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fixing-macpro7-1-memory-errors"}},[t._v("#")]),t._v(" Fixing MacPro7,1 Memory Errors")]),t._v(" "),r("p",[t._v("On macOS Catalina and newer, users of the MacPro7,1 SMBIOS will experience this error on each boot:")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",{staticStyle:{"text-align":"left"}},[t._v("Notification error")]),t._v(" "),r("th",{staticStyle:{"text-align":"left"}},[t._v("About This Mac Error")])])]),t._v(" "),r("tbody",[r("tr",[r("td",{staticStyle:{"text-align":"left"}},[r("img",{attrs:{width:"1362",src:a(419)}})]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("img",{attrs:{src:a(420),alt:""}})])])])]),t._v(" "),r("p",[t._v("The exact reason for this error is a bit unknown, however ways to resolve this error have been made possible. The most common way to remove the error is to use "),r("a",{attrs:{href:"https://github.com/acidanthera/RestrictEvents/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("RestrictEvents"),r("OutboundLink")],1),t._v(" and we highly encourage all users to use this kext instead.")]),t._v(" "),r("p",[t._v("For those who wish to attempt the legacy mapping way, see the below guide. Note it will require you to map all your DIMMs manually so this will be a time consuming process.")]),t._v(" "),r("h2",{attrs:{id:"mapping-our-memory"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mapping-our-memory"}},[t._v("#")]),t._v(" Mapping our memory")]),t._v(" "),r("p",[t._v("To start, we'll want to grab the following files:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/dortania/OpenCore-Post-Install/blob/master/extra-files/CustomMemory.plist.zip",target:"_blank",rel:"noopener noreferrer"}},[t._v("CustomMemory.plist"),r("OutboundLink")],1),t._v(" "),r("ul",[r("li",[t._v("Example setup for using CustomMemory in OpenCore")])])]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/acidanthera/dmidecode/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("dmidecode"),r("OutboundLink")],1),t._v(" "),r("ul",[r("li",[t._v("Tool used for extracting SMBIOS info in macOS")])])])]),t._v(" "),r("p",[t._v("Here is a premade file which has properties already set out for you, one you open it you should see the following:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(421),alt:""}})]),t._v(" "),r("p",[t._v("From here we see may properties, lets try to break it down:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#datawidth"}},[t._v("DataWidth")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#errorcorrection"}},[t._v("ErrorCorrection")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#formfactor"}},[t._v("FormFactor")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#maxcapacity"}},[t._v("MaxCapacity")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#totalwidth"}},[t._v("TotalWidth")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#type"}},[t._v("Type")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#typedetail"}},[t._v("TypeDetail")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#devices"}},[t._v("Devices")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#assettag"}},[t._v("AssetTag")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#banklocator"}},[t._v("BankLocator")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#devicelocator"}},[t._v("DeviceLocator")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#manufacturer"}},[t._v("Manufacturer")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#partnumber"}},[t._v("PartNumber")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#serialnumber"}},[t._v("SerialNumber")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#size"}},[t._v("Size")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#speed"}},[t._v("Speed")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#cleaning-up"}},[t._v("Cleaning up")])])]),t._v(" "),r("h3",{attrs:{id:"datawidth"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#datawidth"}},[t._v("#")]),t._v(" DataWidth")]),t._v(" "),r("p",[t._v("Specifies the data width, in bits, of the memory. A DataWidth of 0 and a TotalWidth of 8 indicates that the device is being used solely to provide 8 error-correction bits.")]),t._v(" "),r("p",[t._v("To determine the DataWidth, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Data Width:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example Output")]),t._v("\n Data Width: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bits\n Data Width: Unknown\n Data Width: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bits\n Data Width: Unknown\n Data Width: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bits\n Data Width: Unknown\n Data Width: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bits\n Data Width: Unknown\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nDataWidth "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v("\n")])])]),r("h3",{attrs:{id:"errorcorrection"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#errorcorrection"}},[t._v("#")]),t._v(" ErrorCorrection")]),t._v(" "),r("p",[t._v("Specifies ECC support:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("1 — Other\n2 — Unknown\n3 — None\n4 — Parity\n5 — Single-bit ECC\n6 — Multi-bit ECC\n7 — CRC\n")])])]),r("p",[t._v("To determine ErrorCorrection, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error Correction Type:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example Output")]),t._v("\n Error Correction Type: None\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nErrorCorrection "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])])]),r("h3",{attrs:{id:"formfactor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#formfactor"}},[t._v("#")]),t._v(" FormFactor")]),t._v(" "),r("p",[t._v("Specifies Memory Form Factor")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("1  — Other\n2  — Unknown\n9  — DIMM\n13 — SODIMM\n15 — FB-DIMM\n")])])]),r("p",[t._v("To determine FormFactor, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Form Factor:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example Output")]),t._v("\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nFormFactor "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n")])])]),r("h3",{attrs:{id:"maxcapacity"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#maxcapacity"}},[t._v("#")]),t._v(" MaxCapacity")]),t._v(" "),r("p",[t._v("Specifies maximum supported memory in your system")]),t._v(" "),r("p",[t._v("Type: Bytes")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("8GB   - 8589934592\n16GB  - 17179869184\n32GB  - 34359738368\n64GB  - 68719476736\n128GB - 137438953472\n256GB - 274877906944\n")])])]),r("h3",{attrs:{id:"totalwidth"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#totalwidth"}},[t._v("#")]),t._v(" TotalWidth")]),t._v(" "),r("p",[t._v("Specifies the total width, in bits, of the memory, including any check or error-correction bits. If there are no error-correction bits, this value should be equal to DataWidth.")]),t._v(" "),r("p",[t._v("To determine TotalWidth, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Total Width:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example Output")]),t._v("\n Total Width: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("72")]),t._v(" bits\n Total Width: Unknown\n Total Width: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("72")]),t._v(" bits\n Total Width: Unknown\n Total Width: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("72")]),t._v(" bits\n Total Width: Unknown\n Total Width: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("72")]),t._v(" bits\n Total Width: Unknown\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nTotalWidth "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("72")]),t._v("\n")])])]),r("h3",{attrs:{id:"type"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" Type")]),t._v(" "),r("p",[t._v("Specifies memory type")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("1  — Other\n2  — Unknown\n15 — SDRAM\n18 — DDR\n19 — DDR2\n20 — DDR2 FB-DIMM\n24 — DDR3\n26 — DDR4\n27 — LPDDR\n28 — LPDDR2\n29 — LPDDR3\n30 — LPDDR4\n")])])]),r("p",[t._v("To determine Type, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Type:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example Output")]),t._v("\n Type: DDR4\n Type: Unknown\n Type: DDR4\n Type: Unknown\n Type: DDR4\n Type: Unknown\n Type: DDR4\n Type: Unknown\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nType "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),t._v("\n")])])]),r("h3",{attrs:{id:"typedetail"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#typedetail"}},[t._v("#")]),t._v(" TypeDetail")]),t._v(" "),r("p",[t._v("Specifies other memory type information")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Bit 0 — Reserved, set to 0\nBit 1 — Other\nBit 2 — Unknown\nBit 7 — Synchronous\nBit 13 — Registered (buffered)\nBit 14 — Unbuffered (unregistered)\n")])])]),r("p",[t._v("Combine all that are applicable, example:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Bit 13 — Registered (buffered)\nBit 14 — Unbuffered (unregistered)\n-----------------------------------\n27 = TypeDetail\n")])])]),r("p",[t._v("To determine TypeDetail, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Type Detail:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example Output")]),t._v("\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nTypeDetail "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n")])])]),r("h3",{attrs:{id:"devices"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#devices"}},[t._v("#")]),t._v(" Devices")]),t._v(" "),r("p",[t._v("Array of Memory Devices, and where we do out magic to fix the error. In the sample CustomMemory.plist I provided, we have 12 slots listed here. From this, you'll want to open up System Profiler in macOS and look at the Memory tab:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(422),alt:""}})]),t._v(" "),r("p",[t._v("Here we see which slots are populated by memory, and which are empty. For filled slots, simply run through the below on how to pull information. For slots that are empty however, you'll want to add some blank information into thinking macOS has populated device. Ensure that by the end, you have 12 total slots filled with devices.")]),t._v(" "),r("p",[t._v("Example of filled slots vs fake:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(423),alt:""}})]),t._v(" "),r("p",[t._v("We recommend setting the Size and Speed to both 1, to ensure applications that do pull from memory are not confused that you have more than you should.")]),t._v(" "),r("p",[t._v("Next lets break down the properties:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#assettag"}},[t._v("AssetTag")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#banklocator"}},[t._v("BankLocator")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#devicelocator"}},[t._v("DeviceLocator")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#manufacturer"}},[t._v("Manufacturer")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#partnumber"}},[t._v("PartNumber")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#serialnumber"}},[t._v("SerialNumber")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#size"}},[t._v("Size")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#speed"}},[t._v("Speed")])])]),t._v(" "),r("h4",{attrs:{id:"assettag"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#assettag"}},[t._v("#")]),t._v(" AssetTag")]),t._v(" "),r("p",[t._v("To determine AssetTag, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Asset Tag:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Example Output")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\n")])])]),r("ul",[r("li",[t._v("If dmidecode prints "),r("code",[t._v("Not Specified")]),t._v(", you can simply leave this entry blank")])]),t._v(" "),r("h4",{attrs:{id:"banklocator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#banklocator"}},[t._v("#")]),t._v(" BankLocator")]),t._v(" "),r("p",[t._v("To determine BankLocator, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bank Locator:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Example Output")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\n")])])]),r("ul",[r("li",[t._v("If dmidecode prints "),r("code",[t._v("Not Specified")]),t._v(", you can simply leave this entry blank")])]),t._v(" "),r("h4",{attrs:{id:"devicelocator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#devicelocator"}},[t._v("#")]),t._v(" DeviceLocator")]),t._v(" "),r("p",[t._v("To determine DeviceLocator, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Locator:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Example Output")]),t._v("\n Locator: DIMM_A1\n Locator: DIMM_A2\n Locator: DIMM_B1\n Locator: DIMM_B2\n Locator: DIMM_C1\n Locator: DIMM_C2\n Locator: DIMM_D1\n Locator: DIMM_D2\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":  DIMM_A1\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(":  DIMM_A2\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(":  DIMM_B1\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(":  DIMM_B2\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(":  DIMM_C1\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(":  DIMM_C2\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(":  DIMM_D1\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(":  DIMM_D2\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(":  DIMM_EMPTY\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(": DIMM_EMPTY\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(": DIMM_EMPTY\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(": DIMM_EMPTY\n")])])]),r("h4",{attrs:{id:"manufacturer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#manufacturer"}},[t._v("#")]),t._v(" Manufacturer")]),t._v(" "),r("p",[t._v("To determine Manufacturer, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Manufacturer:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Example Output")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\n")])])]),r("h4",{attrs:{id:"partnumber"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#partnumber"}},[t._v("#")]),t._v(" PartNumber")]),t._v(" "),r("p",[t._v("To determine PartNumber, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Part Number:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Example Output")]),t._v("\n Part Number: KHX2666C16/8G\n Part Number: NO DIMM\n Part Number: KHX2666C16/8G\n Part Number: NO DIMM\n Part Number: KHX2666C16/8G\n Part Number: NO DIMM\n Part Number: KHX2666C15D4/8G\n Part Number: NO DIMM\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":  KHX2666C16/8G\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(":  EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(":  KHX2666C16/8G\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(":  EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(":  KHX2666C16/8G\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(":  EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(":  KHX2666C15D4/8G\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(":  EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(":  EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(": EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(": EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(": EmptyDIMM\n")])])]),r("h4",{attrs:{id:"serialnumber"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#serialnumber"}},[t._v("#")]),t._v(" SerialNumber")]),t._v(" "),r("p",[t._v("To determine SerialNumber, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Serial Number:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Example Output")]),t._v("\n Serial Number: 0F095257\n Serial Number: NO DIMM\n Serial Number: 0C099A57\n Serial Number: NO DIMM\n Serial Number: 752EDED8\n Serial Number: NO DIMM\n Serial Number: A2032E84\n Serial Number: NO DIMM\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":  0F095257\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(":  EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(":  0C099A57\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(":  EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(":  752EDED8\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(":  EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(":  A2032E84\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(":  EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(":  EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(": EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(": EmptyDIMM\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(": EmptyDIMM\n")])])]),r("h4",{attrs:{id:"size"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#size"}},[t._v("#")]),t._v(" Size")]),t._v(" "),r("p",[t._v("Size of single memory stick in MB")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("1GB  - 1024\n2GB  - 2048\n4GB  - 4096\n8GB  - 8192\n16GB - 16384\n32GB - 32768\n64GB - 65536\n12GB - 131072\n")])])]),r("p",[t._v("To determine Size, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Size:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Example Output")]),t._v("\n Size: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" GB\n Size: No Module Installed\n Size: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" GB\n Size: No Module Installed\n Size: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" GB\n Size: No Module Installed\n Size: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" GB\n Size: No Module Installed\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8192")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8192")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8192")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8192")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(": "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(": "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(": "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),r("h4",{attrs:{id:"speed"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#speed"}},[t._v("#")]),t._v(" Speed")]),t._v(" "),r("p",[t._v("Speed of memory in Mhz")]),t._v(" "),r("p",[t._v("ex: "),r("code",[t._v("3000Mhz")])]),t._v(" "),r("p",[t._v("To determine Speed, run the following:")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[t._v("path/to/dmidecode -t memory "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Speed:"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Example Output")]),t._v("\n Speed: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2666")]),t._v(" MT/s\n Speed: Unknown\n Speed: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2666")]),t._v(" MT/s\n Speed: Unknown\n Speed: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2666")]),t._v(" MT/s\n Speed: Unknown\n Speed: "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2666")]),t._v(" MT/s\n Speed: Unknown\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final Value")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2666")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2666")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2666")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2666")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(":  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(": "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(": "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nEntry "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(": "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),r("h2",{attrs:{id:"cleaning-up"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cleaning-up"}},[t._v("#")]),t._v(" Cleaning up")]),t._v(" "),r("p",[t._v("Now that you've built the table, we can now merge it into our config.plist.")]),t._v(" "),r("p",[t._v("Simply copy over your work from the CustomMemory.plist and paste it into PlatformInfo:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(424),alt:""}})]),t._v(" "),r("p",[t._v("Once this is copied over, enable "),r("code",[t._v("PlatformInfo -> CustomMemory")]),t._v(" and reboot. The error should be no more now!")]),t._v(" "),r("p",[t._v("Reminder that you must "),r("strong",[t._v("fill")]),t._v(" all 12 slots with memory, otherwise the error will not disappear:")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",{staticStyle:{"text-align":"left"}},[t._v("Fixed System Profiler")]),t._v(" "),r("th",{staticStyle:{"text-align":"left"}},[t._v("Fixed About This Mac")])])]),t._v(" "),r("tbody",[r("tr",[r("td",{staticStyle:{"text-align":"left"}},[r("img",{attrs:{src:a(425),alt:""}})]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("img",{attrs:{src:a(426),alt:""}})])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);